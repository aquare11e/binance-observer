name: CI/CD pipeline
on:
  push:
    branches:
      - master
      - remade-ci
  pull_request:
    branches:
      - master

env:
  NAMESPACE: observers

jobs:
  gradleValidation:
    name: Gradle Wrapper validation
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v3

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

  build:
    name: Compile and Test code
    runs-on: ubuntu-latest
    needs: [gradleValidation]
    steps:
      - name: Checkout to branch
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          arguments: build --scan

      - name: Create Jar-package
        if: github.event_name != 'pull_request'
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          arguments: shadowJar

      - name: Cache Jar-package
        if: github.event_name != 'pull_request'
        uses: actions/cache@v3
        with:
          key: jar-package-${{github.run_number}}
          path: build/fatjar/*

  docker:
    name: Build image and push to Dockerhub
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [build]
    steps:
      - name: Checkout to branch
        uses: actions/checkout@v3

      - name: Cache Jar-package
        uses: actions/cache@v3
        with:
          key: jar-package-${{github.run_number}}
          path: build/fatjar/*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/binobs:latest

  kubernetes:
    name: Deploy to Kubernetes cluster
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout to branch
        uses: actions/checkout@v3

      - name: Substitute settings to secrets.yaml and ingress.yaml
        uses: Slidem/inplace-envsubst-action@v1.2.2
        env:
          CERT_MANAGER_ISSUER: ${{ secrets.CERT_MANAGER_ISSUER }}
          HOST_URL: ${{ secrets.HOST_URL }}
          GRAFANA_USER: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
          GRAFANA_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_USER }}
          INFLUXDB_USER: ${{ secrets.DOCKER_INFLUXDB_INIT_USERNAME }}
          INFLUXDB_PASSWORD: ${{ secrets.DOCKER_INFLUXDB_INIT_PASSWORD }}
          INFLUXDB_ADMIN_TOKEN: ${{ secrets.DOCKER_INFLUXDB_INIT_ADMIN_TOKEN }}
        with:
          working-directory: kubernetes
          fail-on-missing-variables: "true"
          search_input: |
            { 
              "files": [
                "secrets.yaml",
                "ingress.yaml"
              ] 
            }

      - name: Create namespace
        uses: actions-hub/kubectl@v1.24.0
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -f kubernetes/namespace

      - name: Deploy configmaps and secrets
        uses: actions-hub/kubectl@v1.24.0
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply --namespace="${{ env.NAMESPACE }}" -f kubernetes/data

      - name: Create configmap with configuration file
        uses: actions-hub/kubectl@v1.24.0
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: create configmap binobs-config-file --namespace="${{ env.NAMESPACE }}" --from-file config/tinkoff-rub-usd.json

      - name: Deploy all resource manifests
        uses: actions-hub/kubectl@v1.24.0
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply --namespace="${{ env.NAMESPACE }}" -f kubernetes/resources
