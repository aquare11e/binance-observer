name: CI/CD pipeline
on: [push, pull_request]

env:
  NAMESPACE: observers

jobs:
  gradleValidation:
    name: Gradle Wrapper validation
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v3

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

  build:
    name: Compile and Test code
    runs-on: ubuntu-latest
    needs: [gradleValidation]
    steps:
      - name: Checkout to branch
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          arguments: build --scan

      - name: Create Jar-package
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          arguments: shadowJar

      - name: Cache Jar-package
        uses: actions/cache@v3
        with:
          key: jar-package
          path: build/fatjar/*

  docker:
    name: Build image and push to Dockerhub
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout to branch
        uses: actions/checkout@v3

      - name: Cache Jar-package
        uses: actions/cache@v3
        with:
          key: jar-package
          path: build/fatjar/*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/binobs:latest

  kubernetes:
    name: Deploy to Kubernetes cluster
    runs-on: ubuntu-latest
    needs: [ docker ]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout to branch
        uses: actions/checkout@v3

      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Create Grafana secrets
        uses: Azure/k8s-create-secret@v2
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-type: 'generic'
          secret-name: grafana-creds
          arguments: |
            --from-literal=GF_SECURITY_ADMIN_USER=${{ secrets.GRAFANA_USER }}
            --from-literal=GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}

      - name: Create InfluxDB secrets
        uses: Azure/k8s-create-secret@v2
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-type: 'generic'
          secret-name: influxdb-creds
          arguments: |
            --from-literal=DOCKER_INFLUXDB_INIT_USERNAME=${{ secrets.INFLUXDB_USER }}
            --from-literal=DOCKER_INFLUXDB_INIT_PASSWORD=${{ secrets.INFLUXDB_PASSWORD }}
            --from-literal=DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${{ secrets.INFLUXDB_ADMIN_TOKEN }}

      - name: Create application secrets
        uses: Azure/k8s-create-secret@v2
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-type: 'generic'
          secret-name: binobs-creds
          arguments: |
            --from-literal=INFLUXDB_TOKEN=${{ secrets.INFLUXDB_ADMIN_TOKEN }}

      - name: Apply additional settings to ingress.yaml
        uses: swdotcom/update-and-apply-kubernetes-configs@v1
        with:
          k8-config-file-paths: kubernetes/ingress.yaml
          replacement-method: defined
        env:
          CERT_MANAGER_ISSUER=${{ secrets.CERT_MANAGER_ISSUER }}
          HOST_URL=${{ secrets.HOST_URL }}

      - name: Deploy all manifests
        uses: azure/k8s-deploy@v4
        with:
          namespace: ${{ env.NAMESPACE }}
          action: deploy
          strategy: basic
          private-cluster: true
          manifests: |
            kubernetes/configmaps.yaml
            kubernetes/influxdb.yaml
            kubernetes/grafana.yaml
            kubernetes/binobs.yaml
            kubernetes/ingress.yaml
